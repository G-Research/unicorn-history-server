// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetAppsPerPartitionPerQueueParams is parameters of getAppsPerPartitionPerQueue operation.
type GetAppsPerPartitionPerQueueParams struct {
	PartitionName string
	QueueName     string
}

func unpackGetAppsPerPartitionPerQueueParams(packed middleware.Parameters) (params GetAppsPerPartitionPerQueueParams) {
	{
		key := middleware.ParameterKey{
			Name: "partition_name",
			In:   "path",
		}
		params.PartitionName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "queue_name",
			In:   "path",
		}
		params.QueueName = packed[key].(string)
	}
	return params
}

func decodeGetAppsPerPartitionPerQueueParams(args [2]string, argsEscaped bool, r *http.Request) (params GetAppsPerPartitionPerQueueParams, _ error) {
	// Decode path: partition_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "partition_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PartitionName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "partition_name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: queue_name.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.QueueName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNodesPerPartitionParams is parameters of getNodesPerPartition operation.
type GetNodesPerPartitionParams struct {
	PartitionName string
}

func unpackGetNodesPerPartitionParams(packed middleware.Parameters) (params GetNodesPerPartitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "partition_name",
			In:   "path",
		}
		params.PartitionName = packed[key].(string)
	}
	return params
}

func decodeGetNodesPerPartitionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetNodesPerPartitionParams, _ error) {
	// Decode path: partition_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "partition_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PartitionName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "partition_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetQueuesPerPartitionParams is parameters of getQueuesPerPartition operation.
type GetQueuesPerPartitionParams struct {
	PartitionName string
}

func unpackGetQueuesPerPartitionParams(packed middleware.Parameters) (params GetQueuesPerPartitionParams) {
	{
		key := middleware.ParameterKey{
			Name: "partition_name",
			In:   "path",
		}
		params.PartitionName = packed[key].(string)
	}
	return params
}

func decodeGetQueuesPerPartitionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetQueuesPerPartitionParams, _ error) {
	// Decode path: partition_name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "partition_name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PartitionName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "partition_name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
