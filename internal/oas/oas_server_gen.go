// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetAppsHistory implements getAppsHistory operation.
	//
	// Get applications history.
	//
	// GET /ws/v1/history/apps
	GetAppsHistory(ctx context.Context) (GetAppsHistoryRes, error)
	// GetAppsPerPartitionPerQueue implements getAppsPerPartitionPerQueue operation.
	//
	// Get applications for a queue in a partition.
	//
	// GET /ws/v1/partition/{partition_name}/queue/{queue_name}/applications
	GetAppsPerPartitionPerQueue(ctx context.Context, params GetAppsPerPartitionPerQueueParams) (GetAppsPerPartitionPerQueueRes, error)
	// GetContainersHistory implements getContainersHistory operation.
	//
	// Get containers history.
	//
	// GET /ws/v1/history/containers
	GetContainersHistory(ctx context.Context) (GetContainersHistoryRes, error)
	// GetEventStatistics implements getEventStatistics operation.
	//
	// Get event statistics.
	//
	// GET /ws/v1/event-statistics
	GetEventStatistics(ctx context.Context) (GetEventStatisticsRes, error)
	// GetNodeUtilizations implements getNodeUtilizations operation.
	//
	// Get node utilizations.
	//
	// GET /ws/v1/scheduler/node-utilizations
	GetNodeUtilizations(ctx context.Context) (GetNodeUtilizationsRes, error)
	// GetNodesPerPartition implements getNodesPerPartition operation.
	//
	// Get nodes for a partition.
	//
	// GET /ws/v1/partition/{partition_name}/nodes
	GetNodesPerPartition(ctx context.Context, params GetNodesPerPartitionParams) (GetNodesPerPartitionRes, error)
	// GetPartitions implements getPartitions operation.
	//
	// Get all partitions.
	//
	// GET /ws/v1/partitions
	GetPartitions(ctx context.Context) (GetPartitionsRes, error)
	// GetQueuesPerPartition implements getQueuesPerPartition operation.
	//
	// Get queues for a partition.
	//
	// GET /ws/v1/partition/{partition_name}/queues
	GetQueuesPerPartition(ctx context.Context, params GetQueuesPerPartitionParams) (GetQueuesPerPartitionRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
