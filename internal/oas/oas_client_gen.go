// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// GetAppsHistory invokes getAppsHistory operation.
	//
	// Get applications history.
	//
	// GET /ws/v1/history/apps
	GetAppsHistory(ctx context.Context) (GetAppsHistoryRes, error)
	// GetAppsPerPartitionPerQueue invokes getAppsPerPartitionPerQueue operation.
	//
	// Get applications for a queue in a partition.
	//
	// GET /ws/v1/partition/{partition_name}/queue/{queue_name}/applications
	GetAppsPerPartitionPerQueue(ctx context.Context, params GetAppsPerPartitionPerQueueParams) (GetAppsPerPartitionPerQueueRes, error)
	// GetContainersHistory invokes getContainersHistory operation.
	//
	// Get containers history.
	//
	// GET /ws/v1/history/containers
	GetContainersHistory(ctx context.Context) (GetContainersHistoryRes, error)
	// GetEventStatistics invokes getEventStatistics operation.
	//
	// Get event statistics.
	//
	// GET /ws/v1/event-statistics
	GetEventStatistics(ctx context.Context) (GetEventStatisticsRes, error)
	// GetNodeUtilizations invokes getNodeUtilizations operation.
	//
	// Get node utilizations.
	//
	// GET /ws/v1/scheduler/node-utilizations
	GetNodeUtilizations(ctx context.Context) (GetNodeUtilizationsRes, error)
	// GetNodesPerPartition invokes getNodesPerPartition operation.
	//
	// Get nodes for a partition.
	//
	// GET /ws/v1/partition/{partition_name}/nodes
	GetNodesPerPartition(ctx context.Context, params GetNodesPerPartitionParams) (GetNodesPerPartitionRes, error)
	// GetPartitions invokes getPartitions operation.
	//
	// Get all partitions.
	//
	// GET /ws/v1/partitions
	GetPartitions(ctx context.Context) (GetPartitionsRes, error)
	// GetQueuesPerPartition invokes getQueuesPerPartition operation.
	//
	// Get queues for a partition.
	//
	// GET /ws/v1/partition/{partition_name}/queues
	GetQueuesPerPartition(ctx context.Context, params GetQueuesPerPartitionParams) (GetQueuesPerPartitionRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// GetAppsHistory invokes getAppsHistory operation.
//
// Get applications history.
//
// GET /ws/v1/history/apps
func (c *Client) GetAppsHistory(ctx context.Context) (GetAppsHistoryRes, error) {
	res, err := c.sendGetAppsHistory(ctx)
	return res, err
}

func (c *Client) sendGetAppsHistory(ctx context.Context) (res GetAppsHistoryRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getAppsHistory"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/history/apps"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetAppsHistory",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ws/v1/history/apps"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetAppsHistoryResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAppsPerPartitionPerQueue invokes getAppsPerPartitionPerQueue operation.
//
// Get applications for a queue in a partition.
//
// GET /ws/v1/partition/{partition_name}/queue/{queue_name}/applications
func (c *Client) GetAppsPerPartitionPerQueue(ctx context.Context, params GetAppsPerPartitionPerQueueParams) (GetAppsPerPartitionPerQueueRes, error) {
	res, err := c.sendGetAppsPerPartitionPerQueue(ctx, params)
	return res, err
}

func (c *Client) sendGetAppsPerPartitionPerQueue(ctx context.Context, params GetAppsPerPartitionPerQueueParams) (res GetAppsPerPartitionPerQueueRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getAppsPerPartitionPerQueue"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/partition/{partition_name}/queue/{queue_name}/applications"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetAppsPerPartitionPerQueue",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/ws/v1/partition/"
	{
		// Encode "partition_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "partition_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.PartitionName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/queue/"
	{
		// Encode "queue_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "queue_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.QueueName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/applications"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetAppsPerPartitionPerQueueResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetContainersHistory invokes getContainersHistory operation.
//
// Get containers history.
//
// GET /ws/v1/history/containers
func (c *Client) GetContainersHistory(ctx context.Context) (GetContainersHistoryRes, error) {
	res, err := c.sendGetContainersHistory(ctx)
	return res, err
}

func (c *Client) sendGetContainersHistory(ctx context.Context) (res GetContainersHistoryRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getContainersHistory"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/history/containers"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetContainersHistory",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ws/v1/history/containers"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetContainersHistoryResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetEventStatistics invokes getEventStatistics operation.
//
// Get event statistics.
//
// GET /ws/v1/event-statistics
func (c *Client) GetEventStatistics(ctx context.Context) (GetEventStatisticsRes, error) {
	res, err := c.sendGetEventStatistics(ctx)
	return res, err
}

func (c *Client) sendGetEventStatistics(ctx context.Context) (res GetEventStatisticsRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getEventStatistics"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/event-statistics"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetEventStatistics",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ws/v1/event-statistics"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetEventStatisticsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetNodeUtilizations invokes getNodeUtilizations operation.
//
// Get node utilizations.
//
// GET /ws/v1/scheduler/node-utilizations
func (c *Client) GetNodeUtilizations(ctx context.Context) (GetNodeUtilizationsRes, error) {
	res, err := c.sendGetNodeUtilizations(ctx)
	return res, err
}

func (c *Client) sendGetNodeUtilizations(ctx context.Context) (res GetNodeUtilizationsRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getNodeUtilizations"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/scheduler/node-utilizations"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetNodeUtilizations",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ws/v1/scheduler/node-utilizations"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetNodeUtilizationsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetNodesPerPartition invokes getNodesPerPartition operation.
//
// Get nodes for a partition.
//
// GET /ws/v1/partition/{partition_name}/nodes
func (c *Client) GetNodesPerPartition(ctx context.Context, params GetNodesPerPartitionParams) (GetNodesPerPartitionRes, error) {
	res, err := c.sendGetNodesPerPartition(ctx, params)
	return res, err
}

func (c *Client) sendGetNodesPerPartition(ctx context.Context, params GetNodesPerPartitionParams) (res GetNodesPerPartitionRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getNodesPerPartition"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/partition/{partition_name}/nodes"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetNodesPerPartition",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/ws/v1/partition/"
	{
		// Encode "partition_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "partition_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.PartitionName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/nodes"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetNodesPerPartitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetPartitions invokes getPartitions operation.
//
// Get all partitions.
//
// GET /ws/v1/partitions
func (c *Client) GetPartitions(ctx context.Context) (GetPartitionsRes, error) {
	res, err := c.sendGetPartitions(ctx)
	return res, err
}

func (c *Client) sendGetPartitions(ctx context.Context) (res GetPartitionsRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getPartitions"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/partitions"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetPartitions",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ws/v1/partitions"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetPartitionsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetQueuesPerPartition invokes getQueuesPerPartition operation.
//
// Get queues for a partition.
//
// GET /ws/v1/partition/{partition_name}/queues
func (c *Client) GetQueuesPerPartition(ctx context.Context, params GetQueuesPerPartitionParams) (GetQueuesPerPartitionRes, error) {
	res, err := c.sendGetQueuesPerPartition(ctx, params)
	return res, err
}

func (c *Client) sendGetQueuesPerPartition(ctx context.Context, params GetQueuesPerPartitionParams) (res GetQueuesPerPartitionRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getQueuesPerPartition"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/ws/v1/partition/{partition_name}/queues"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetQueuesPerPartition",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/ws/v1/partition/"
	{
		// Encode "partition_name" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "partition_name",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.PartitionName))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/queues"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetQueuesPerPartitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
