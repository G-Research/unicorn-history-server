# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 3m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 20

  # include test files or not, default is true
  tests: true

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  formats:
    - format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  exhaustive:
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true

  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20

  goimports:
    local-prefixes: github.com/G-Research/yunikorn-history-server

  govet:
    enable-all: true
    disable:
      - fieldalignment

  lll:
    line-length: 140

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

linters:
  enable:
    - goconst
    - gocyclo
    - goimports
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - staticcheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - gofmt
  enable-all: false
  disable:
    - errorlint
  disable-all: false
  presets:
    - bugs
    - unused
  fast: false

issues:
  # List of regexps of issue texts to exclude, empty creators by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To creators all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - declaration of "err" shadows declaration at line
    -

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To creators all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: true

  # Which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty creators, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  exclude-files:
    - ".*\\_mock.go$"

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false
